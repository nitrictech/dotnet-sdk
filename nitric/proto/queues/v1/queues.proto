syntax = "proto3";
package nitric.proto.queues.v1;

import "google/protobuf/struct.proto";

// protoc plugin options for code generation
option go_package = "github.com/nitrictech/nitric/core/pkg/proto/queues/v1;queuespb";
option java_package = "io.nitric.proto.queues.v1";
option java_multiple_files = true;
option java_outer_classname = "QueuesService";
option php_namespace = "Nitric\\Proto\\Queues\\V1";
option csharp_namespace = "Nitric.Proto.Queues.v1";

// The Nitric Queue Service contract
service Queues {
  // Send message(s) to a queue
  rpc Enqueue (QueueEnqueueRequest) returns (QueueEnqueueResponse);
  // Receive message(s) from a queue
  rpc Dequeue (QueueDequeueRequest) returns (QueueDequeueResponse);
  // Complete an message previously popped from a queue
  rpc Complete (QueueCompleteRequest) returns (QueueCompleteResponse);
}

message QueueEnqueueRequest {
  // The Nitric name for the queue
  // this will automatically be resolved to the provider specific queue identifier.
  string queue_name = 1;
  // Array of messages to push to the queue
  repeated QueueMessage messages = 2;
}

// Response for sending messages to a queue
message QueueEnqueueResponse {
  // A list of messages that failed to be queued
  repeated FailedEnqueueMessage failed_messages = 1;
}

message QueueDequeueRequest {
  // The nitric name for the queue
  // this will automatically be resolved to the provider specific queue identifier.
  string queue_name = 1;
  // The max number of messages to pop off the queue, may be capped by provider specific limitations
  int32 depth = 2;
}

message QueueDequeueResponse {
  // Array of messages popped off the queue
  repeated DequeuedMessage messages = 1;
}

message QueueCompleteRequest {
  // The nitric name for the queue
  //  this will automatically be resolved to the provider specific queue identifier.
  string queue_name = 1;

  // Lease id of the message to be completed
  string lease_id = 2;
}

message QueueCompleteResponse {}

// An message to be sent to a queue.
message QueueMessage {
  // The queue message contents
  oneof content {
    google.protobuf.Struct struct_payload = 1;
  }
}

message DequeuedMessage {
  string lease_id = 1;

  QueueMessage message = 2;
}

message FailedEnqueueMessage {
  // The message that failed to be pushed
  QueueMessage message = 1;
  // A description of the failure
  string details = 2;
}
