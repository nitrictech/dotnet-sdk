syntax = "proto3";
package nitric.proto.storage.v1;

// protoc plugin options for code generation
option go_package = "github.com/nitrictech/nitric/core/pkg/proto/storage/v1;storagepb";
option java_package = "io.nitric.proto.storage.v1";
option java_multiple_files = true;
option java_outer_classname = "StorageService";
option php_namespace = "Nitric\\Proto\\Storage\\V1";
option csharp_namespace = "Nitric.Proto.Storage.v1";

import "google/protobuf/duration.proto";

// Services for storage and retrieval of blobs in the form of byte arrays, such as text and binary blobs.
service Storage {
  // Retrieve an item from a bucket
  rpc Read (StorageReadRequest) returns (StorageReadResponse);
  // Store an item to a bucket
  rpc Write (StorageWriteRequest) returns (StorageWriteResponse);
  // Delete an item from a bucket
  rpc Delete (StorageDeleteRequest) returns (StorageDeleteResponse);
  // Generate a pre-signed URL for direct operations on an item
  rpc PreSignUrl (StoragePreSignUrlRequest) returns (StoragePreSignUrlResponse);
  // List blobs currently in the bucket
  rpc ListBlobs (StorageListBlobsRequest) returns (StorageListBlobsResponse);
  // Determine is an object exists in a bucket
  rpc Exists (StorageExistsRequest) returns (StorageExistsResponse);
}

service StorageListener {
  // Listen for changes on a bucket
  rpc Listen (stream ClientMessage) returns (stream ServerMessage);
}


message ClientMessage {
  // globally unique ID of the request/response pair
  string id = 1;
  
  oneof content {
    // Watch for changes on a bucket
    RegistrationRequest registration_request = 2;
    // Stop watching for changes on a bucket
    BlobEventResponse blob_event_response = 3;
  }
}

message ServerMessage {
  // globally unique ID of the request/response pair
  string id = 1;
  
  oneof content {
    // Watch for changes on a bucket
    RegistrationResponse registration_response = 2;
    // Stop watching for changes on a bucket
    BlobEventRequest blob_event_request = 3;
  }
}

message BlobEventRequest {
  string bucket_name = 1;
  
  // Now we don't need to specify a type enum, the specific contents/type comes in a single field of the context.
  oneof event {
     BlobEvent blob_event = 10;
  }
}

message BlobEvent {
  // The key of the blob the event is for
  string key = 1;

  // The type of event that occurred
  BlobEventType type = 2;
}


message BlobEventResponse {
  bool success = 1;
}

enum BlobEventType {
  Created = 0;
  Deleted = 1;
}

message RegistrationRequest {
  // Name of the bucket to watch
  string bucket_name = 1;

  // Event type to listen for
  BlobEventType blob_event_type = 2;

  // A blob key prefix to filter events by
  string key_prefix_filter = 3;
}

message RegistrationResponse {
  // The ID of the registration
  string id = 1;
}

// Request to put (create/update) a storage item
message StorageWriteRequest {
  // Nitric name of the bucket to store in
  //  this will be automatically resolved to the provider specific bucket identifier.
  string bucket_name = 1;
  // Key to store the item under
  string key = 2;
  // bytes array to store
  bytes body = 3;
}

// Result of putting a storage item
message StorageWriteResponse {}

// Request to retrieve a storage item
message StorageReadRequest {
  // Nitric name of the bucket to retrieve from
  //  this will be automatically resolved to the provider specific bucket identifier.
  string bucket_name = 1;
  // Key of item to retrieve
  string key = 2;
}

// Returned storage item
message StorageReadResponse {
  // The body bytes of the retrieved storage item
  bytes body = 1;
}

// Request to delete a storage item
message StorageDeleteRequest {
  // Name of the bucket to delete from
  string bucket_name = 1;
  // Key of item to delete
  string key = 2;
}

// Result of deleting a storage item
message StorageDeleteResponse {}

// Request to generate a pre-signed URL for a blob to perform a specific operation, such as read or write.
message StoragePreSignUrlRequest {
  // Nitric name of the bucket to retrieve from
  //  this will be automatically resolved to the provider specific bucket identifier.
  string bucket_name = 1;
  // Key of item to generate the signed URL for.
  // The URL and the token it contains will only be valid for operations on this resource specifically.
  string key = 2;
  // Operation
  enum Operation {
    READ = 0;
    WRITE = 1;
  }
  Operation operation = 3;
  // Expiry defined as as protobuf duration
  google.protobuf.Duration expiry = 4;
}

message StoragePreSignUrlResponse {
  // The pre-signed url, restricted to the operation, resource and expiry time specified in the request.
  string url = 1;
}

message StorageListBlobsRequest {
  string bucket_name = 1;

  string prefix = 2;
}

message Blob {
  string key = 1;
}

message StorageListBlobsResponse {
  // keys of the blobs in the bucket
  repeated Blob blobs = 1;
}

message StorageExistsRequest {
  string bucket_name = 1;
  // Key of item to retrieve
  string key = 2;
}

message StorageExistsResponse {
  bool exists = 1;
}