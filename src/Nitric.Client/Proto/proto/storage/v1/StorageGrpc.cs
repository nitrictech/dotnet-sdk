// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/storage/v1/storage.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Nitric.Proto.Storage.v1 {
  /// <summary>
  /// Services for storage and retrieval of files in the form of byte arrays, such as text and binary files.
  /// </summary>
  public static partial class StorageService
  {
    static readonly string __ServiceName = "nitric.storage.v1.StorageService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Nitric.Proto.Storage.v1.StorageReadRequest> __Marshaller_nitric_storage_v1_StorageReadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Storage.v1.StorageReadRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Storage.v1.StorageReadResponse> __Marshaller_nitric_storage_v1_StorageReadResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Storage.v1.StorageReadResponse.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Storage.v1.StorageWriteRequest> __Marshaller_nitric_storage_v1_StorageWriteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Storage.v1.StorageWriteRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Storage.v1.StorageWriteResponse> __Marshaller_nitric_storage_v1_StorageWriteResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Storage.v1.StorageWriteResponse.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Storage.v1.StorageDeleteRequest> __Marshaller_nitric_storage_v1_StorageDeleteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Storage.v1.StorageDeleteRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Storage.v1.StorageDeleteResponse> __Marshaller_nitric_storage_v1_StorageDeleteResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Storage.v1.StorageDeleteResponse.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Storage.v1.StoragePreSignUrlRequest> __Marshaller_nitric_storage_v1_StoragePreSignUrlRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Storage.v1.StoragePreSignUrlRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Storage.v1.StoragePreSignUrlResponse> __Marshaller_nitric_storage_v1_StoragePreSignUrlResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Storage.v1.StoragePreSignUrlResponse.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Storage.v1.StorageListFilesRequest> __Marshaller_nitric_storage_v1_StorageListFilesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Storage.v1.StorageListFilesRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Storage.v1.StorageListFilesResponse> __Marshaller_nitric_storage_v1_StorageListFilesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Storage.v1.StorageListFilesResponse.Parser));

    static readonly grpc::Method<global::Nitric.Proto.Storage.v1.StorageReadRequest, global::Nitric.Proto.Storage.v1.StorageReadResponse> __Method_Read = new grpc::Method<global::Nitric.Proto.Storage.v1.StorageReadRequest, global::Nitric.Proto.Storage.v1.StorageReadResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Read",
        __Marshaller_nitric_storage_v1_StorageReadRequest,
        __Marshaller_nitric_storage_v1_StorageReadResponse);

    static readonly grpc::Method<global::Nitric.Proto.Storage.v1.StorageWriteRequest, global::Nitric.Proto.Storage.v1.StorageWriteResponse> __Method_Write = new grpc::Method<global::Nitric.Proto.Storage.v1.StorageWriteRequest, global::Nitric.Proto.Storage.v1.StorageWriteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Write",
        __Marshaller_nitric_storage_v1_StorageWriteRequest,
        __Marshaller_nitric_storage_v1_StorageWriteResponse);

    static readonly grpc::Method<global::Nitric.Proto.Storage.v1.StorageDeleteRequest, global::Nitric.Proto.Storage.v1.StorageDeleteResponse> __Method_Delete = new grpc::Method<global::Nitric.Proto.Storage.v1.StorageDeleteRequest, global::Nitric.Proto.Storage.v1.StorageDeleteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_nitric_storage_v1_StorageDeleteRequest,
        __Marshaller_nitric_storage_v1_StorageDeleteResponse);

    static readonly grpc::Method<global::Nitric.Proto.Storage.v1.StoragePreSignUrlRequest, global::Nitric.Proto.Storage.v1.StoragePreSignUrlResponse> __Method_PreSignUrl = new grpc::Method<global::Nitric.Proto.Storage.v1.StoragePreSignUrlRequest, global::Nitric.Proto.Storage.v1.StoragePreSignUrlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PreSignUrl",
        __Marshaller_nitric_storage_v1_StoragePreSignUrlRequest,
        __Marshaller_nitric_storage_v1_StoragePreSignUrlResponse);

    static readonly grpc::Method<global::Nitric.Proto.Storage.v1.StorageListFilesRequest, global::Nitric.Proto.Storage.v1.StorageListFilesResponse> __Method_ListFiles = new grpc::Method<global::Nitric.Proto.Storage.v1.StorageListFilesRequest, global::Nitric.Proto.Storage.v1.StorageListFilesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListFiles",
        __Marshaller_nitric_storage_v1_StorageListFilesRequest,
        __Marshaller_nitric_storage_v1_StorageListFilesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Nitric.Proto.Storage.v1.StorageReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of StorageService</summary>
    [grpc::BindServiceMethod(typeof(StorageService), "BindService")]
    public abstract partial class StorageServiceBase
    {
      /// <summary>
      /// Retrieve an item from a bucket
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.Storage.v1.StorageReadResponse> Read(global::Nitric.Proto.Storage.v1.StorageReadRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Store an item to a bucket
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.Storage.v1.StorageWriteResponse> Write(global::Nitric.Proto.Storage.v1.StorageWriteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete an item from a bucket
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.Storage.v1.StorageDeleteResponse> Delete(global::Nitric.Proto.Storage.v1.StorageDeleteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generate a pre-signed URL for direct operations on an item
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.Storage.v1.StoragePreSignUrlResponse> PreSignUrl(global::Nitric.Proto.Storage.v1.StoragePreSignUrlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List files currently in the bucket
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.Storage.v1.StorageListFilesResponse> ListFiles(global::Nitric.Proto.Storage.v1.StorageListFilesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for StorageService</summary>
    public partial class StorageServiceClient : grpc::ClientBase<StorageServiceClient>
    {
      /// <summary>Creates a new client for StorageService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public StorageServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for StorageService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public StorageServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected StorageServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected StorageServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieve an item from a bucket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Storage.v1.StorageReadResponse Read(global::Nitric.Proto.Storage.v1.StorageReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Read(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve an item from a bucket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Storage.v1.StorageReadResponse Read(global::Nitric.Proto.Storage.v1.StorageReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Read, null, options, request);
      }
      /// <summary>
      /// Retrieve an item from a bucket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Storage.v1.StorageReadResponse> ReadAsync(global::Nitric.Proto.Storage.v1.StorageReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve an item from a bucket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Storage.v1.StorageReadResponse> ReadAsync(global::Nitric.Proto.Storage.v1.StorageReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Read, null, options, request);
      }
      /// <summary>
      /// Store an item to a bucket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Storage.v1.StorageWriteResponse Write(global::Nitric.Proto.Storage.v1.StorageWriteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Write(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Store an item to a bucket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Storage.v1.StorageWriteResponse Write(global::Nitric.Proto.Storage.v1.StorageWriteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Write, null, options, request);
      }
      /// <summary>
      /// Store an item to a bucket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Storage.v1.StorageWriteResponse> WriteAsync(global::Nitric.Proto.Storage.v1.StorageWriteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WriteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Store an item to a bucket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Storage.v1.StorageWriteResponse> WriteAsync(global::Nitric.Proto.Storage.v1.StorageWriteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Write, null, options, request);
      }
      /// <summary>
      /// Delete an item from a bucket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Storage.v1.StorageDeleteResponse Delete(global::Nitric.Proto.Storage.v1.StorageDeleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an item from a bucket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Storage.v1.StorageDeleteResponse Delete(global::Nitric.Proto.Storage.v1.StorageDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Delete an item from a bucket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Storage.v1.StorageDeleteResponse> DeleteAsync(global::Nitric.Proto.Storage.v1.StorageDeleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an item from a bucket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Storage.v1.StorageDeleteResponse> DeleteAsync(global::Nitric.Proto.Storage.v1.StorageDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Generate a pre-signed URL for direct operations on an item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Storage.v1.StoragePreSignUrlResponse PreSignUrl(global::Nitric.Proto.Storage.v1.StoragePreSignUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PreSignUrl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generate a pre-signed URL for direct operations on an item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Storage.v1.StoragePreSignUrlResponse PreSignUrl(global::Nitric.Proto.Storage.v1.StoragePreSignUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PreSignUrl, null, options, request);
      }
      /// <summary>
      /// Generate a pre-signed URL for direct operations on an item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Storage.v1.StoragePreSignUrlResponse> PreSignUrlAsync(global::Nitric.Proto.Storage.v1.StoragePreSignUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PreSignUrlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generate a pre-signed URL for direct operations on an item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Storage.v1.StoragePreSignUrlResponse> PreSignUrlAsync(global::Nitric.Proto.Storage.v1.StoragePreSignUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PreSignUrl, null, options, request);
      }
      /// <summary>
      /// List files currently in the bucket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Storage.v1.StorageListFilesResponse ListFiles(global::Nitric.Proto.Storage.v1.StorageListFilesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFiles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List files currently in the bucket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Storage.v1.StorageListFilesResponse ListFiles(global::Nitric.Proto.Storage.v1.StorageListFilesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListFiles, null, options, request);
      }
      /// <summary>
      /// List files currently in the bucket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Storage.v1.StorageListFilesResponse> ListFilesAsync(global::Nitric.Proto.Storage.v1.StorageListFilesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFilesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List files currently in the bucket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Storage.v1.StorageListFilesResponse> ListFilesAsync(global::Nitric.Proto.Storage.v1.StorageListFilesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListFiles, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override StorageServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StorageServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(StorageServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Read, serviceImpl.Read)
          .AddMethod(__Method_Write, serviceImpl.Write)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_PreSignUrl, serviceImpl.PreSignUrl)
          .AddMethod(__Method_ListFiles, serviceImpl.ListFiles).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, StorageServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Read, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.Storage.v1.StorageReadRequest, global::Nitric.Proto.Storage.v1.StorageReadResponse>(serviceImpl.Read));
      serviceBinder.AddMethod(__Method_Write, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.Storage.v1.StorageWriteRequest, global::Nitric.Proto.Storage.v1.StorageWriteResponse>(serviceImpl.Write));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.Storage.v1.StorageDeleteRequest, global::Nitric.Proto.Storage.v1.StorageDeleteResponse>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_PreSignUrl, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.Storage.v1.StoragePreSignUrlRequest, global::Nitric.Proto.Storage.v1.StoragePreSignUrlResponse>(serviceImpl.PreSignUrl));
      serviceBinder.AddMethod(__Method_ListFiles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.Storage.v1.StorageListFilesRequest, global::Nitric.Proto.Storage.v1.StorageListFilesResponse>(serviceImpl.ListFiles));
    }

  }
}
#endregion
