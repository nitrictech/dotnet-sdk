// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nitric/proto/kvstore/v1/kvstore.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Nitric.Proto.KvStore.v1 {
  /// <summary>
  /// Service for storage and retrieval of simple JSON keyValue
  /// </summary>
  public static partial class KvStore
  {
    static readonly string __ServiceName = "nitric.proto.kvstore.v1.KvStore";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Nitric.Proto.KvStore.v1.KvStoreGetValueRequest> __Marshaller_nitric_proto_kvstore_v1_KvStoreGetValueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.KvStore.v1.KvStoreGetValueRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.KvStore.v1.KvStoreGetValueResponse> __Marshaller_nitric_proto_kvstore_v1_KvStoreGetValueResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.KvStore.v1.KvStoreGetValueResponse.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.KvStore.v1.KvStoreSetValueRequest> __Marshaller_nitric_proto_kvstore_v1_KvStoreSetValueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.KvStore.v1.KvStoreSetValueRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.KvStore.v1.KvStoreSetValueResponse> __Marshaller_nitric_proto_kvstore_v1_KvStoreSetValueResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.KvStore.v1.KvStoreSetValueResponse.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyRequest> __Marshaller_nitric_proto_kvstore_v1_KvStoreDeleteKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyResponse> __Marshaller_nitric_proto_kvstore_v1_KvStoreDeleteKeyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyResponse.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.KvStore.v1.KvStoreScanKeysRequest> __Marshaller_nitric_proto_kvstore_v1_KvStoreScanKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.KvStore.v1.KvStoreScanKeysRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.KvStore.v1.KvStoreScanKeysResponse> __Marshaller_nitric_proto_kvstore_v1_KvStoreScanKeysResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.KvStore.v1.KvStoreScanKeysResponse.Parser));

    static readonly grpc::Method<global::Nitric.Proto.KvStore.v1.KvStoreGetValueRequest, global::Nitric.Proto.KvStore.v1.KvStoreGetValueResponse> __Method_GetValue = new grpc::Method<global::Nitric.Proto.KvStore.v1.KvStoreGetValueRequest, global::Nitric.Proto.KvStore.v1.KvStoreGetValueResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetValue",
        __Marshaller_nitric_proto_kvstore_v1_KvStoreGetValueRequest,
        __Marshaller_nitric_proto_kvstore_v1_KvStoreGetValueResponse);

    static readonly grpc::Method<global::Nitric.Proto.KvStore.v1.KvStoreSetValueRequest, global::Nitric.Proto.KvStore.v1.KvStoreSetValueResponse> __Method_SetValue = new grpc::Method<global::Nitric.Proto.KvStore.v1.KvStoreSetValueRequest, global::Nitric.Proto.KvStore.v1.KvStoreSetValueResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetValue",
        __Marshaller_nitric_proto_kvstore_v1_KvStoreSetValueRequest,
        __Marshaller_nitric_proto_kvstore_v1_KvStoreSetValueResponse);

    static readonly grpc::Method<global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyRequest, global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyResponse> __Method_DeleteKey = new grpc::Method<global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyRequest, global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteKey",
        __Marshaller_nitric_proto_kvstore_v1_KvStoreDeleteKeyRequest,
        __Marshaller_nitric_proto_kvstore_v1_KvStoreDeleteKeyResponse);

    static readonly grpc::Method<global::Nitric.Proto.KvStore.v1.KvStoreScanKeysRequest, global::Nitric.Proto.KvStore.v1.KvStoreScanKeysResponse> __Method_ScanKeys = new grpc::Method<global::Nitric.Proto.KvStore.v1.KvStoreScanKeysRequest, global::Nitric.Proto.KvStore.v1.KvStoreScanKeysResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ScanKeys",
        __Marshaller_nitric_proto_kvstore_v1_KvStoreScanKeysRequest,
        __Marshaller_nitric_proto_kvstore_v1_KvStoreScanKeysResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Nitric.Proto.KvStore.v1.KvstoreReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of KvStore</summary>
    [grpc::BindServiceMethod(typeof(KvStore), "BindService")]
    public abstract partial class KvStoreBase
    {
      /// <summary>
      /// Get an existing value
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.KvStore.v1.KvStoreGetValueResponse> GetValue(global::Nitric.Proto.KvStore.v1.KvStoreGetValueRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new or overwrite an existing value
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.KvStore.v1.KvStoreSetValueResponse> SetValue(global::Nitric.Proto.KvStore.v1.KvStoreSetValueRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a key and its value
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyResponse> DeleteKey(global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Iterate over all keys in a store
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ScanKeys(global::Nitric.Proto.KvStore.v1.KvStoreScanKeysRequest request, grpc::IServerStreamWriter<global::Nitric.Proto.KvStore.v1.KvStoreScanKeysResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for KvStore</summary>
    public partial class KvStoreClient : grpc::ClientBase<KvStoreClient>
    {
      /// <summary>Creates a new client for KvStore</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public KvStoreClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for KvStore that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public KvStoreClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected KvStoreClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected KvStoreClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Get an existing value
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.KvStore.v1.KvStoreGetValueResponse GetValue(global::Nitric.Proto.KvStore.v1.KvStoreGetValueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetValue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an existing value
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.KvStore.v1.KvStoreGetValueResponse GetValue(global::Nitric.Proto.KvStore.v1.KvStoreGetValueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetValue, null, options, request);
      }
      /// <summary>
      /// Get an existing value
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.KvStore.v1.KvStoreGetValueResponse> GetValueAsync(global::Nitric.Proto.KvStore.v1.KvStoreGetValueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetValueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an existing value
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.KvStore.v1.KvStoreGetValueResponse> GetValueAsync(global::Nitric.Proto.KvStore.v1.KvStoreGetValueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetValue, null, options, request);
      }
      /// <summary>
      /// Create a new or overwrite an existing value
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.KvStore.v1.KvStoreSetValueResponse SetValue(global::Nitric.Proto.KvStore.v1.KvStoreSetValueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetValue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new or overwrite an existing value
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.KvStore.v1.KvStoreSetValueResponse SetValue(global::Nitric.Proto.KvStore.v1.KvStoreSetValueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetValue, null, options, request);
      }
      /// <summary>
      /// Create a new or overwrite an existing value
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.KvStore.v1.KvStoreSetValueResponse> SetValueAsync(global::Nitric.Proto.KvStore.v1.KvStoreSetValueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetValueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new or overwrite an existing value
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.KvStore.v1.KvStoreSetValueResponse> SetValueAsync(global::Nitric.Proto.KvStore.v1.KvStoreSetValueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetValue, null, options, request);
      }
      /// <summary>
      /// Delete a key and its value
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyResponse DeleteKey(global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a key and its value
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyResponse DeleteKey(global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteKey, null, options, request);
      }
      /// <summary>
      /// Delete a key and its value
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyResponse> DeleteKeyAsync(global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a key and its value
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyResponse> DeleteKeyAsync(global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteKey, null, options, request);
      }
      /// <summary>
      /// Iterate over all keys in a store
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Nitric.Proto.KvStore.v1.KvStoreScanKeysResponse> ScanKeys(global::Nitric.Proto.KvStore.v1.KvStoreScanKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Iterate over all keys in a store
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Nitric.Proto.KvStore.v1.KvStoreScanKeysResponse> ScanKeys(global::Nitric.Proto.KvStore.v1.KvStoreScanKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ScanKeys, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override KvStoreClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new KvStoreClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(KvStoreBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetValue, serviceImpl.GetValue)
          .AddMethod(__Method_SetValue, serviceImpl.SetValue)
          .AddMethod(__Method_DeleteKey, serviceImpl.DeleteKey)
          .AddMethod(__Method_ScanKeys, serviceImpl.ScanKeys).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, KvStoreBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetValue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.KvStore.v1.KvStoreGetValueRequest, global::Nitric.Proto.KvStore.v1.KvStoreGetValueResponse>(serviceImpl.GetValue));
      serviceBinder.AddMethod(__Method_SetValue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.KvStore.v1.KvStoreSetValueRequest, global::Nitric.Proto.KvStore.v1.KvStoreSetValueResponse>(serviceImpl.SetValue));
      serviceBinder.AddMethod(__Method_DeleteKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyRequest, global::Nitric.Proto.KvStore.v1.KvStoreDeleteKeyResponse>(serviceImpl.DeleteKey));
      serviceBinder.AddMethod(__Method_ScanKeys, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Nitric.Proto.KvStore.v1.KvStoreScanKeysRequest, global::Nitric.Proto.KvStore.v1.KvStoreScanKeysResponse>(serviceImpl.ScanKeys));
    }

  }
}
#endregion
