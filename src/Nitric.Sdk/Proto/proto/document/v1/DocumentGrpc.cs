// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/document/v1/document.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Nitric.Proto.Document.v1 {
  /// <summary>
  /// Service for storage and retrieval of simple JSON keyValue
  /// </summary>
  public static partial class DocumentService
  {
    static readonly string __ServiceName = "nitric.document.v1.DocumentService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Nitric.Proto.Document.v1.DocumentGetRequest> __Marshaller_nitric_document_v1_DocumentGetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Document.v1.DocumentGetRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Document.v1.DocumentGetResponse> __Marshaller_nitric_document_v1_DocumentGetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Document.v1.DocumentGetResponse.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Document.v1.DocumentSetRequest> __Marshaller_nitric_document_v1_DocumentSetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Document.v1.DocumentSetRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Document.v1.DocumentSetResponse> __Marshaller_nitric_document_v1_DocumentSetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Document.v1.DocumentSetResponse.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Document.v1.DocumentDeleteRequest> __Marshaller_nitric_document_v1_DocumentDeleteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Document.v1.DocumentDeleteRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Document.v1.DocumentDeleteResponse> __Marshaller_nitric_document_v1_DocumentDeleteResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Document.v1.DocumentDeleteResponse.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Document.v1.DocumentQueryRequest> __Marshaller_nitric_document_v1_DocumentQueryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Document.v1.DocumentQueryRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Document.v1.DocumentQueryResponse> __Marshaller_nitric_document_v1_DocumentQueryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Document.v1.DocumentQueryResponse.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Document.v1.DocumentQueryStreamRequest> __Marshaller_nitric_document_v1_DocumentQueryStreamRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Document.v1.DocumentQueryStreamRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Document.v1.DocumentQueryStreamResponse> __Marshaller_nitric_document_v1_DocumentQueryStreamResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Document.v1.DocumentQueryStreamResponse.Parser));

    static readonly grpc::Method<global::Nitric.Proto.Document.v1.DocumentGetRequest, global::Nitric.Proto.Document.v1.DocumentGetResponse> __Method_Get = new grpc::Method<global::Nitric.Proto.Document.v1.DocumentGetRequest, global::Nitric.Proto.Document.v1.DocumentGetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_nitric_document_v1_DocumentGetRequest,
        __Marshaller_nitric_document_v1_DocumentGetResponse);

    static readonly grpc::Method<global::Nitric.Proto.Document.v1.DocumentSetRequest, global::Nitric.Proto.Document.v1.DocumentSetResponse> __Method_Set = new grpc::Method<global::Nitric.Proto.Document.v1.DocumentSetRequest, global::Nitric.Proto.Document.v1.DocumentSetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Set",
        __Marshaller_nitric_document_v1_DocumentSetRequest,
        __Marshaller_nitric_document_v1_DocumentSetResponse);

    static readonly grpc::Method<global::Nitric.Proto.Document.v1.DocumentDeleteRequest, global::Nitric.Proto.Document.v1.DocumentDeleteResponse> __Method_Delete = new grpc::Method<global::Nitric.Proto.Document.v1.DocumentDeleteRequest, global::Nitric.Proto.Document.v1.DocumentDeleteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_nitric_document_v1_DocumentDeleteRequest,
        __Marshaller_nitric_document_v1_DocumentDeleteResponse);

    static readonly grpc::Method<global::Nitric.Proto.Document.v1.DocumentQueryRequest, global::Nitric.Proto.Document.v1.DocumentQueryResponse> __Method_Query = new grpc::Method<global::Nitric.Proto.Document.v1.DocumentQueryRequest, global::Nitric.Proto.Document.v1.DocumentQueryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Query",
        __Marshaller_nitric_document_v1_DocumentQueryRequest,
        __Marshaller_nitric_document_v1_DocumentQueryResponse);

    static readonly grpc::Method<global::Nitric.Proto.Document.v1.DocumentQueryStreamRequest, global::Nitric.Proto.Document.v1.DocumentQueryStreamResponse> __Method_QueryStream = new grpc::Method<global::Nitric.Proto.Document.v1.DocumentQueryStreamRequest, global::Nitric.Proto.Document.v1.DocumentQueryStreamResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "QueryStream",
        __Marshaller_nitric_document_v1_DocumentQueryStreamRequest,
        __Marshaller_nitric_document_v1_DocumentQueryStreamResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Nitric.Proto.Document.v1.DocumentReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DocumentService</summary>
    [grpc::BindServiceMethod(typeof(DocumentService), "BindService")]
    public abstract partial class DocumentServiceBase
    {
      /// <summary>
      /// Get an existing document
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.Document.v1.DocumentGetResponse> Get(global::Nitric.Proto.Document.v1.DocumentGetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new or overwrite an existing document
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.Document.v1.DocumentSetResponse> Set(global::Nitric.Proto.Document.v1.DocumentSetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete an existing document
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.Document.v1.DocumentDeleteResponse> Delete(global::Nitric.Proto.Document.v1.DocumentDeleteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query the document collection (supports pagination)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.Document.v1.DocumentQueryResponse> Query(global::Nitric.Proto.Document.v1.DocumentQueryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query the document collection (supports streaming)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task QueryStream(global::Nitric.Proto.Document.v1.DocumentQueryStreamRequest request, grpc::IServerStreamWriter<global::Nitric.Proto.Document.v1.DocumentQueryStreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DocumentService</summary>
    public partial class DocumentServiceClient : grpc::ClientBase<DocumentServiceClient>
    {
      /// <summary>Creates a new client for DocumentService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DocumentServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DocumentService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DocumentServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DocumentServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DocumentServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Get an existing document
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Document.v1.DocumentGetResponse Get(global::Nitric.Proto.Document.v1.DocumentGetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an existing document
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Document.v1.DocumentGetResponse Get(global::Nitric.Proto.Document.v1.DocumentGetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Get an existing document
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Document.v1.DocumentGetResponse> GetAsync(global::Nitric.Proto.Document.v1.DocumentGetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an existing document
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Document.v1.DocumentGetResponse> GetAsync(global::Nitric.Proto.Document.v1.DocumentGetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Create a new or overwrite an existing document
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Document.v1.DocumentSetResponse Set(global::Nitric.Proto.Document.v1.DocumentSetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Set(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new or overwrite an existing document
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Document.v1.DocumentSetResponse Set(global::Nitric.Proto.Document.v1.DocumentSetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Set, null, options, request);
      }
      /// <summary>
      /// Create a new or overwrite an existing document
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Document.v1.DocumentSetResponse> SetAsync(global::Nitric.Proto.Document.v1.DocumentSetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new or overwrite an existing document
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Document.v1.DocumentSetResponse> SetAsync(global::Nitric.Proto.Document.v1.DocumentSetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Set, null, options, request);
      }
      /// <summary>
      /// Delete an existing document
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Document.v1.DocumentDeleteResponse Delete(global::Nitric.Proto.Document.v1.DocumentDeleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an existing document
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Document.v1.DocumentDeleteResponse Delete(global::Nitric.Proto.Document.v1.DocumentDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Delete an existing document
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Document.v1.DocumentDeleteResponse> DeleteAsync(global::Nitric.Proto.Document.v1.DocumentDeleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an existing document
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Document.v1.DocumentDeleteResponse> DeleteAsync(global::Nitric.Proto.Document.v1.DocumentDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Query the document collection (supports pagination)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Document.v1.DocumentQueryResponse Query(global::Nitric.Proto.Document.v1.DocumentQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Query(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the document collection (supports pagination)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Document.v1.DocumentQueryResponse Query(global::Nitric.Proto.Document.v1.DocumentQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Query, null, options, request);
      }
      /// <summary>
      /// Query the document collection (supports pagination)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Document.v1.DocumentQueryResponse> QueryAsync(global::Nitric.Proto.Document.v1.DocumentQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the document collection (supports pagination)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Document.v1.DocumentQueryResponse> QueryAsync(global::Nitric.Proto.Document.v1.DocumentQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Query, null, options, request);
      }
      /// <summary>
      /// Query the document collection (supports streaming)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Nitric.Proto.Document.v1.DocumentQueryStreamResponse> QueryStream(global::Nitric.Proto.Document.v1.DocumentQueryStreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the document collection (supports streaming)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Nitric.Proto.Document.v1.DocumentQueryStreamResponse> QueryStream(global::Nitric.Proto.Document.v1.DocumentQueryStreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_QueryStream, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DocumentServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DocumentServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DocumentServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Set, serviceImpl.Set)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Query, serviceImpl.Query)
          .AddMethod(__Method_QueryStream, serviceImpl.QueryStream).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DocumentServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.Document.v1.DocumentGetRequest, global::Nitric.Proto.Document.v1.DocumentGetResponse>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Set, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.Document.v1.DocumentSetRequest, global::Nitric.Proto.Document.v1.DocumentSetResponse>(serviceImpl.Set));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.Document.v1.DocumentDeleteRequest, global::Nitric.Proto.Document.v1.DocumentDeleteResponse>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Query, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.Document.v1.DocumentQueryRequest, global::Nitric.Proto.Document.v1.DocumentQueryResponse>(serviceImpl.Query));
      serviceBinder.AddMethod(__Method_QueryStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Nitric.Proto.Document.v1.DocumentQueryStreamRequest, global::Nitric.Proto.Document.v1.DocumentQueryStreamResponse>(serviceImpl.QueryStream));
    }

  }
}
#endregion
