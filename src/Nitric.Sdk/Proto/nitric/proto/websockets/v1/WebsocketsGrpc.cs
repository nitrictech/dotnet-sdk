// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nitric/proto/websockets/v1/websockets.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Nitric.Proto.Websockets.v1 {
  public static partial class Websocket
  {
    static readonly string __ServiceName = "nitric.proto.websockets.v1.Websocket";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Nitric.Proto.Websockets.v1.WebsocketSendRequest> __Marshaller_nitric_proto_websockets_v1_WebsocketSendRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Websockets.v1.WebsocketSendRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Websockets.v1.WebsocketSendResponse> __Marshaller_nitric_proto_websockets_v1_WebsocketSendResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Websockets.v1.WebsocketSendResponse.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Websockets.v1.WebsocketCloseRequest> __Marshaller_nitric_proto_websockets_v1_WebsocketCloseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Websockets.v1.WebsocketCloseRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Websockets.v1.WebsocketCloseResponse> __Marshaller_nitric_proto_websockets_v1_WebsocketCloseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Websockets.v1.WebsocketCloseResponse.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Websockets.v1.WebsocketDetailsRequest> __Marshaller_nitric_proto_websockets_v1_WebsocketDetailsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Websockets.v1.WebsocketDetailsRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Websockets.v1.WebsocketDetailsResponse> __Marshaller_nitric_proto_websockets_v1_WebsocketDetailsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Websockets.v1.WebsocketDetailsResponse.Parser));

    static readonly grpc::Method<global::Nitric.Proto.Websockets.v1.WebsocketSendRequest, global::Nitric.Proto.Websockets.v1.WebsocketSendResponse> __Method_Send = new grpc::Method<global::Nitric.Proto.Websockets.v1.WebsocketSendRequest, global::Nitric.Proto.Websockets.v1.WebsocketSendResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Send",
        __Marshaller_nitric_proto_websockets_v1_WebsocketSendRequest,
        __Marshaller_nitric_proto_websockets_v1_WebsocketSendResponse);

    static readonly grpc::Method<global::Nitric.Proto.Websockets.v1.WebsocketCloseRequest, global::Nitric.Proto.Websockets.v1.WebsocketCloseResponse> __Method_Close = new grpc::Method<global::Nitric.Proto.Websockets.v1.WebsocketCloseRequest, global::Nitric.Proto.Websockets.v1.WebsocketCloseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Close",
        __Marshaller_nitric_proto_websockets_v1_WebsocketCloseRequest,
        __Marshaller_nitric_proto_websockets_v1_WebsocketCloseResponse);

    static readonly grpc::Method<global::Nitric.Proto.Websockets.v1.WebsocketDetailsRequest, global::Nitric.Proto.Websockets.v1.WebsocketDetailsResponse> __Method_Details = new grpc::Method<global::Nitric.Proto.Websockets.v1.WebsocketDetailsRequest, global::Nitric.Proto.Websockets.v1.WebsocketDetailsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Details",
        __Marshaller_nitric_proto_websockets_v1_WebsocketDetailsRequest,
        __Marshaller_nitric_proto_websockets_v1_WebsocketDetailsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Nitric.Proto.Websockets.v1.WebsocketsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Websocket</summary>
    [grpc::BindServiceMethod(typeof(Websocket), "BindService")]
    public abstract partial class WebsocketBase
    {
      /// <summary>
      /// Send a messages to a websocket
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.Websockets.v1.WebsocketSendResponse> Send(global::Nitric.Proto.Websockets.v1.WebsocketSendRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Close a websocket connection
      /// This can be used to force a client to disconnect
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.Websockets.v1.WebsocketCloseResponse> Close(global::Nitric.Proto.Websockets.v1.WebsocketCloseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieve details about an API
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.Websockets.v1.WebsocketDetailsResponse> Details(global::Nitric.Proto.Websockets.v1.WebsocketDetailsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Websocket</summary>
    public partial class WebsocketClient : grpc::ClientBase<WebsocketClient>
    {
      /// <summary>Creates a new client for Websocket</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WebsocketClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Websocket that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WebsocketClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WebsocketClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WebsocketClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Send a messages to a websocket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Websockets.v1.WebsocketSendResponse Send(global::Nitric.Proto.Websockets.v1.WebsocketSendRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Send(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send a messages to a websocket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Websockets.v1.WebsocketSendResponse Send(global::Nitric.Proto.Websockets.v1.WebsocketSendRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Send, null, options, request);
      }
      /// <summary>
      /// Send a messages to a websocket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Websockets.v1.WebsocketSendResponse> SendAsync(global::Nitric.Proto.Websockets.v1.WebsocketSendRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send a messages to a websocket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Websockets.v1.WebsocketSendResponse> SendAsync(global::Nitric.Proto.Websockets.v1.WebsocketSendRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Send, null, options, request);
      }
      /// <summary>
      /// Close a websocket connection
      /// This can be used to force a client to disconnect
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Websockets.v1.WebsocketCloseResponse Close(global::Nitric.Proto.Websockets.v1.WebsocketCloseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Close(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Close a websocket connection
      /// This can be used to force a client to disconnect
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Websockets.v1.WebsocketCloseResponse Close(global::Nitric.Proto.Websockets.v1.WebsocketCloseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Close, null, options, request);
      }
      /// <summary>
      /// Close a websocket connection
      /// This can be used to force a client to disconnect
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Websockets.v1.WebsocketCloseResponse> CloseAsync(global::Nitric.Proto.Websockets.v1.WebsocketCloseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CloseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Close a websocket connection
      /// This can be used to force a client to disconnect
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Websockets.v1.WebsocketCloseResponse> CloseAsync(global::Nitric.Proto.Websockets.v1.WebsocketCloseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Close, null, options, request);
      }
      /// <summary>
      /// Retrieve details about an API
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Websockets.v1.WebsocketDetailsResponse Details(global::Nitric.Proto.Websockets.v1.WebsocketDetailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Details(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve details about an API
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Websockets.v1.WebsocketDetailsResponse Details(global::Nitric.Proto.Websockets.v1.WebsocketDetailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Details, null, options, request);
      }
      /// <summary>
      /// Retrieve details about an API
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Websockets.v1.WebsocketDetailsResponse> DetailsAsync(global::Nitric.Proto.Websockets.v1.WebsocketDetailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DetailsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve details about an API
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Websockets.v1.WebsocketDetailsResponse> DetailsAsync(global::Nitric.Proto.Websockets.v1.WebsocketDetailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Details, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WebsocketClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WebsocketClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(WebsocketBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Send, serviceImpl.Send)
          .AddMethod(__Method_Close, serviceImpl.Close)
          .AddMethod(__Method_Details, serviceImpl.Details).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WebsocketBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Send, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.Websockets.v1.WebsocketSendRequest, global::Nitric.Proto.Websockets.v1.WebsocketSendResponse>(serviceImpl.Send));
      serviceBinder.AddMethod(__Method_Close, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.Websockets.v1.WebsocketCloseRequest, global::Nitric.Proto.Websockets.v1.WebsocketCloseResponse>(serviceImpl.Close));
      serviceBinder.AddMethod(__Method_Details, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.Websockets.v1.WebsocketDetailsRequest, global::Nitric.Proto.Websockets.v1.WebsocketDetailsResponse>(serviceImpl.Details));
    }

  }
  public static partial class WebsocketHandler
  {
    static readonly string __ServiceName = "nitric.proto.websockets.v1.WebsocketHandler";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Nitric.Proto.Websockets.v1.ClientMessage> __Marshaller_nitric_proto_websockets_v1_ClientMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Websockets.v1.ClientMessage.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Websockets.v1.ServerMessage> __Marshaller_nitric_proto_websockets_v1_ServerMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Websockets.v1.ServerMessage.Parser));

    static readonly grpc::Method<global::Nitric.Proto.Websockets.v1.ClientMessage, global::Nitric.Proto.Websockets.v1.ServerMessage> __Method_HandleEvents = new grpc::Method<global::Nitric.Proto.Websockets.v1.ClientMessage, global::Nitric.Proto.Websockets.v1.ServerMessage>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "HandleEvents",
        __Marshaller_nitric_proto_websockets_v1_ClientMessage,
        __Marshaller_nitric_proto_websockets_v1_ServerMessage);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Nitric.Proto.Websockets.v1.WebsocketsReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of WebsocketHandler</summary>
    [grpc::BindServiceMethod(typeof(WebsocketHandler), "BindService")]
    public abstract partial class WebsocketHandlerBase
    {
      /// <summary>
      /// Handle incoming websocket events
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task HandleEvents(grpc::IAsyncStreamReader<global::Nitric.Proto.Websockets.v1.ClientMessage> requestStream, grpc::IServerStreamWriter<global::Nitric.Proto.Websockets.v1.ServerMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WebsocketHandler</summary>
    public partial class WebsocketHandlerClient : grpc::ClientBase<WebsocketHandlerClient>
    {
      /// <summary>Creates a new client for WebsocketHandler</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WebsocketHandlerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WebsocketHandler that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WebsocketHandlerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WebsocketHandlerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WebsocketHandlerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Handle incoming websocket events
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Nitric.Proto.Websockets.v1.ClientMessage, global::Nitric.Proto.Websockets.v1.ServerMessage> HandleEvents(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleEvents(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Handle incoming websocket events
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Nitric.Proto.Websockets.v1.ClientMessage, global::Nitric.Proto.Websockets.v1.ServerMessage> HandleEvents(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_HandleEvents, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WebsocketHandlerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WebsocketHandlerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(WebsocketHandlerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_HandleEvents, serviceImpl.HandleEvents).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WebsocketHandlerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_HandleEvents, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Nitric.Proto.Websockets.v1.ClientMessage, global::Nitric.Proto.Websockets.v1.ServerMessage>(serviceImpl.HandleEvents));
    }

  }
}
#endregion
