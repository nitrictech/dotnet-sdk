// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nitric/proto/queues/v1/queues.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Nitric.Proto.Queues.v1 {
  /// <summary>
  /// The Nitric Queue Service contract
  /// </summary>
  public static partial class Queues
  {
    static readonly string __ServiceName = "nitric.proto.queues.v1.Queues";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Nitric.Proto.Queues.v1.QueueSendRequestBatch> __Marshaller_nitric_proto_queues_v1_QueueSendRequestBatch = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Queues.v1.QueueSendRequestBatch.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Queues.v1.QueueSendResponse> __Marshaller_nitric_proto_queues_v1_QueueSendResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Queues.v1.QueueSendResponse.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Queues.v1.QueueReceiveRequest> __Marshaller_nitric_proto_queues_v1_QueueReceiveRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Queues.v1.QueueReceiveRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Queues.v1.QueueReceiveResponse> __Marshaller_nitric_proto_queues_v1_QueueReceiveResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Queues.v1.QueueReceiveResponse.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Queues.v1.QueueCompleteRequest> __Marshaller_nitric_proto_queues_v1_QueueCompleteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Queues.v1.QueueCompleteRequest.Parser));
    static readonly grpc::Marshaller<global::Nitric.Proto.Queues.v1.QueueCompleteResponse> __Marshaller_nitric_proto_queues_v1_QueueCompleteResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nitric.Proto.Queues.v1.QueueCompleteResponse.Parser));

    static readonly grpc::Method<global::Nitric.Proto.Queues.v1.QueueSendRequestBatch, global::Nitric.Proto.Queues.v1.QueueSendResponse> __Method_Send = new grpc::Method<global::Nitric.Proto.Queues.v1.QueueSendRequestBatch, global::Nitric.Proto.Queues.v1.QueueSendResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Send",
        __Marshaller_nitric_proto_queues_v1_QueueSendRequestBatch,
        __Marshaller_nitric_proto_queues_v1_QueueSendResponse);

    static readonly grpc::Method<global::Nitric.Proto.Queues.v1.QueueReceiveRequest, global::Nitric.Proto.Queues.v1.QueueReceiveResponse> __Method_Receive = new grpc::Method<global::Nitric.Proto.Queues.v1.QueueReceiveRequest, global::Nitric.Proto.Queues.v1.QueueReceiveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Receive",
        __Marshaller_nitric_proto_queues_v1_QueueReceiveRequest,
        __Marshaller_nitric_proto_queues_v1_QueueReceiveResponse);

    static readonly grpc::Method<global::Nitric.Proto.Queues.v1.QueueCompleteRequest, global::Nitric.Proto.Queues.v1.QueueCompleteResponse> __Method_Complete = new grpc::Method<global::Nitric.Proto.Queues.v1.QueueCompleteRequest, global::Nitric.Proto.Queues.v1.QueueCompleteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Complete",
        __Marshaller_nitric_proto_queues_v1_QueueCompleteRequest,
        __Marshaller_nitric_proto_queues_v1_QueueCompleteResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Nitric.Proto.Queues.v1.QueuesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Queues</summary>
    [grpc::BindServiceMethod(typeof(Queues), "BindService")]
    public abstract partial class QueuesBase
    {
      /// <summary>
      /// Send messages to a queue
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.Queues.v1.QueueSendResponse> Send(global::Nitric.Proto.Queues.v1.QueueSendRequestBatch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Receive message(s) from a queue
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.Queues.v1.QueueReceiveResponse> Receive(global::Nitric.Proto.Queues.v1.QueueReceiveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Complete an item previously popped from a queue
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nitric.Proto.Queues.v1.QueueCompleteResponse> Complete(global::Nitric.Proto.Queues.v1.QueueCompleteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Queues</summary>
    public partial class QueuesClient : grpc::ClientBase<QueuesClient>
    {
      /// <summary>Creates a new client for Queues</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public QueuesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Queues that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public QueuesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected QueuesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected QueuesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Send messages to a queue
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Queues.v1.QueueSendResponse Send(global::Nitric.Proto.Queues.v1.QueueSendRequestBatch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Send(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send messages to a queue
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Queues.v1.QueueSendResponse Send(global::Nitric.Proto.Queues.v1.QueueSendRequestBatch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Send, null, options, request);
      }
      /// <summary>
      /// Send messages to a queue
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Queues.v1.QueueSendResponse> SendAsync(global::Nitric.Proto.Queues.v1.QueueSendRequestBatch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send messages to a queue
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Queues.v1.QueueSendResponse> SendAsync(global::Nitric.Proto.Queues.v1.QueueSendRequestBatch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Send, null, options, request);
      }
      /// <summary>
      /// Receive message(s) from a queue
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Queues.v1.QueueReceiveResponse Receive(global::Nitric.Proto.Queues.v1.QueueReceiveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Receive(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Receive message(s) from a queue
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Queues.v1.QueueReceiveResponse Receive(global::Nitric.Proto.Queues.v1.QueueReceiveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Receive, null, options, request);
      }
      /// <summary>
      /// Receive message(s) from a queue
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Queues.v1.QueueReceiveResponse> ReceiveAsync(global::Nitric.Proto.Queues.v1.QueueReceiveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReceiveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Receive message(s) from a queue
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Queues.v1.QueueReceiveResponse> ReceiveAsync(global::Nitric.Proto.Queues.v1.QueueReceiveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Receive, null, options, request);
      }
      /// <summary>
      /// Complete an item previously popped from a queue
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Queues.v1.QueueCompleteResponse Complete(global::Nitric.Proto.Queues.v1.QueueCompleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Complete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Complete an item previously popped from a queue
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nitric.Proto.Queues.v1.QueueCompleteResponse Complete(global::Nitric.Proto.Queues.v1.QueueCompleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Complete, null, options, request);
      }
      /// <summary>
      /// Complete an item previously popped from a queue
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Queues.v1.QueueCompleteResponse> CompleteAsync(global::Nitric.Proto.Queues.v1.QueueCompleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CompleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Complete an item previously popped from a queue
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nitric.Proto.Queues.v1.QueueCompleteResponse> CompleteAsync(global::Nitric.Proto.Queues.v1.QueueCompleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Complete, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override QueuesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueuesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(QueuesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Send, serviceImpl.Send)
          .AddMethod(__Method_Receive, serviceImpl.Receive)
          .AddMethod(__Method_Complete, serviceImpl.Complete).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, QueuesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Send, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.Queues.v1.QueueSendRequestBatch, global::Nitric.Proto.Queues.v1.QueueSendResponse>(serviceImpl.Send));
      serviceBinder.AddMethod(__Method_Receive, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.Queues.v1.QueueReceiveRequest, global::Nitric.Proto.Queues.v1.QueueReceiveResponse>(serviceImpl.Receive));
      serviceBinder.AddMethod(__Method_Complete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nitric.Proto.Queues.v1.QueueCompleteRequest, global::Nitric.Proto.Queues.v1.QueueCompleteResponse>(serviceImpl.Complete));
    }

  }
}
#endregion
